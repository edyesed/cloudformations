AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  PublicIps:
    Type: String
    Description: Give instances in the subnets public ips by default, leave this true unless you're using your own VPCs
    Default: true
    AllowedValues:
      - true
      - false
  KeyName:
    Type: String
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.
    # AWS::NoValue makes sense here you think, but Fn::Equals needs string
    Default: ""
  VpcId:
    Type: String
    Description: Select a VPC that allows instances access to the Internet.
    Default: ""
  SubnetID:
    Type: CommaDelimitedList
    Description: Select at two subnets in your selected VPC.
    Default: ""
  DesiredCapacity:
    Type: Number
    Default: '1'
    Description: Number of instances to launch in your ECS cluster.
  MaxSize:
    Type: Number
    Default: '3'
    Description: Maximum number of instances that can be launched in your ECS cluster.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro, t2.small, t2.medium, t2.large, m3.medium, m3.large,
      m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
      c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, c3.large, c3.xlarge,
      c3.2xlarge, c3.4xlarge, c3.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge,
      r3.8xlarge, i2.xlarge, i2.2xlarge, i2.4xlarge, i2.8xlarge]
    ConstraintDescription: Please choose a valid instance type.
Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-eca289fb
    us-east-2:
      AMIID: ami-446f3521
    us-west-1:
      AMIID: ami-9fadf8ff
    us-west-2:
      #AMIID: ami-7abc111a
      AMIID: ami-7abc111a
    eu-west-1:
      AMIID: ami-a1491ad2
    eu-central-1:
      AMIID: ami-54f5303b
    ap-northeast-1:
      AMIID: ami-9cd57ffd
    ap-southeast-1:
      AMIID: ami-a900a3ca
    ap-southeast-2:
      AMIID: ami-5781be34
Conditions:
  NoVpcParam: !Equals [ !Ref VpcId, "" ]
  NoKeyParam: !Equals [ !Ref KeyName, "" ]
  YesKeyParam: !Not [ !Equals [ !Ref KeyName, "" ] ]
    
Resources:
  VpcRouteTableAsscnTwo:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: NoVpcParam
    Properties:
      RouteTableId: !Ref VpcRouteTable
      SubnetId: !Ref SubnetTwo
  
  VpcRouteTableAsscnOne:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: NoVpcParam
    Properties:
      RouteTableId: !Ref VpcRouteTable
      SubnetId: !Ref SubnetOne
  
  VpcRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: NoVpcParam
    Properties:
      VpcId: !Ref VPC
  SubnetDefRoute:
    Type: AWS::EC2::Route
    Condition: NoVpcParam
    DependsOn: 
      - IGW
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref IGW
      RouteTableId: !Ref VpcRouteTable
  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: NoVpcParam
    DependsOn: 
      - IGW
      - VPC
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC
  IGW:
    Type: AWS::EC2::InternetGateway
    Condition: NoVpcParam
    Properties:
      Tags:
        - Key: BuiltFor
          Value: !Ref 'AWS::StackName'
  VPC:
    Type: AWS::EC2::VPC
    Condition: NoVpcParam
    DependsOn: IGW
    Properties:
      CidrBlock: 10.254.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  SubnetOne:
    Type: AWS::EC2::Subnet
    Condition: NoVpcParam
    Properties:
      CidrBlock: 10.254.0.0/24
      AvailabilityZone:
        Fn::Select:
          - 0 
          - Fn::GetAZs: ""
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: !Ref PublicIps
  SubnetTwo:
    Type: AWS::EC2::Subnet
    Condition: NoVpcParam
    Properties:
      CidrBlock: 10.254.1.0/24
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 1 
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: !Ref PublicIps
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref 'AWS::StackName'
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !If [ NoVpcParam, !Ref VPC, !Ref 'VpcId' ]
  EcsSecurityGroupHTTPinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EcsSecurityGroup'
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 0.0.0.0/0
  EcsSecurityGroupSSHinbound:
    # Give a key param, get ssh inbound access
    Condition: YesKeyParam
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EcsSecurityGroup'
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 0.0.0.0/0
  EcsSecurityGroupALBports:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EcsSecurityGroup'
      IpProtocol: tcp
      FromPort: '31000'
      ToPort: '61000'
      SourceSecurityGroupId: !Ref 'EcsSecurityGroup'
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [ECSLogGroup, !Ref 'AWS::StackName']]
      RetentionInDays: 14
  taskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['', [!Ref 'AWS::StackName', -example-http-echo]]
      ContainerDefinitions:
      - Name: http-echo
        Cpu: '10'
        Essential: 'true'
        Image: solsson/http-echo:latest
        Memory: '80'
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'CloudwatchLogsGroup'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: /example/http-echo
        PortMappings:
          - ContainerPort: 8888
        Environment:
          - Name: PORT
            Value: 8888
  ECSALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ECSALB
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      #Subnets: !Ref 'SubnetID'
      Subnets: !If [ NoVpcParam, [ !Ref SubnetOne, !Ref SubnetTwo ], !Ref 'SubnetID']
      SecurityGroups: [!Ref 'EcsSecurityGroup']
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ECSServiceRole
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'ECSTG'
      LoadBalancerArn: !Ref 'ECSALB'
      Port: '80'
      Protocol: HTTP
  ECSALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: ALBListener
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'ECSTG'
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref 'ALBListener'
      Priority: 1
  ECSTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ECSALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: ECSTG
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !If [ NoVpcParam, !Ref VPC, !Ref 'VpcId' ]
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !If [ NoVpcParam, [ !Ref SubnetOne, !Ref SubnetTwo], !Ref 'SubnetID' ]
      AvailabilityZones:
        - Fn::Select:
            - 0 
            - Fn::GetAZs: ""
        - Fn::Select:
            - 1 
            - Fn::GetAZs: ""
      LaunchConfigurationName: !Ref 'ContainerInstances'
      MinSize: '1'
      MaxSize: !Ref 'MaxSize'
      DesiredCapacity: !Ref 'DesiredCapacity'
      TerminationPolicies:
        - OldestLaunchConfiguration
        - OldestInstance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMIID]
      SecurityGroups: [!Ref 'EcsSecurityGroup']
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      #XXX KeyName: !Ref 'KeyName'
      #XXX KeyName: !If [ NoKeyParam, !Ref 'AWS::NoValue', !Ref 'KeyName']
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}
  service:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      Cluster: !Ref 'ECSCluster'
      DesiredCount: '1'
      LoadBalancers:
      - ContainerName: http-echo
        ContainerPort: '8888'
        TargetGroupArn: !Ref 'ECSTG'
      Role: !Ref 'ECSServiceRole'
      TaskDefinition: !Ref 'taskdefinition'
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['elasticloadbalancing:DeregisterInstancesFromLoadBalancer', 'elasticloadbalancing:DeregisterTargets',
              'elasticloadbalancing:Describe*', 'elasticloadbalancing:RegisterInstancesWithLoadBalancer',
              'elasticloadbalancing:RegisterTargets', 'ec2:Describe*', 'ec2:AuthorizeSecurityGroupIngress']
            Resource: '*'

  ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: service
    Properties:
      MaxCapacity: 40
      MinCapacity: 1
      ResourceId: !Join ['', [service/, !Ref 'ECSCluster', /, !GetAtt [service, Name]]]
      RoleARN: !GetAtt [AutoscalingRole, Arn]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ASGScaleUp:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ECSAutoScalingGroup
      EstimatedInstanceWarmup: 90
      MetricAggregationType: Average
      PolicyType: StepScaling
      StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 1
  ASGScaleDown:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ECSAutoScalingGroup
      EstimatedInstanceWarmup: 90
      MetricAggregationType: Average
      PolicyType: StepScaling
      StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: -1


  ServiceScaleUp:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ScaleUp
      PolicyType: StepScaling
      ScalingTargetId: !Ref 'ServiceScalingTarget'
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          MetricIntervalUpperBound: 30
          ScalingAdjustment: 1
        - MetricIntervalLowerBound: 30
          ScalingAdjustment: 3

  ServiceScaleDown:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ScaleDown
      PolicyType: StepScaling
      ScalingTargetId: !Ref 'ServiceScalingTarget'
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: -1

  ALB500sAlarmScaleUp:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '10'
      AlarmDescription: Alarm if our ALB generates too many HTTP 500s.
      Period: '60'
      AlarmActions: [!Ref 'ServiceScaleUp']
      Namespace: AWS/ApplicationELB
      Dimensions:
      - Name: ECSService
        Value: !Ref 'service'
      ComparisonOperator: GreaterThanThreshold
      MetricName: HTTPCode_ELB_5XX_Count
  ALB200sAlarmScaleUp:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Sum
      Threshold: '10'
      ComparisonOperator: GreaterThanThreshold
      AlarmDescription: Scale up if we get more than 10 hits in any one minute
      Period: '60'
      AlarmActions: [!Ref 'ServiceScaleUp']
      Namespace: AWS/ApplicationELB
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt ECSALB.LoadBalancerFullName
      MetricName: RequestCount


  ALB200sAlarmScaleDown:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Sum
      Threshold: '1'
      ComparisonOperator: LessThanThreshold
      AlarmDescription: Scale down if we less than 1 hits in any one minute
      Period: '60'
      AlarmActions: [!Ref 'ServiceScaleDown']
      Namespace: AWS/ApplicationELB
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt ECSALB.LoadBalancerFullName
      MetricName: RequestCount

  ASGCpuAlarmScaleUp:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '50'
      ComparisonOperator: GreaterThanThreshold
      AlarmDescription: Scale the ASG if a 5m average of CPU utilized is greater than 50%
      Period: '300'
      AlarmActions: [!Ref 'ASGScaleUp']
      Namespace: AWS/ECS
      Dimensions:
        - Name: ClusterName
          Value: !Ref 'AWS::StackName'
        - Name: ServiceName
          Value: !Select [ 1, !Split [ '/', !Ref 'service' ]]
      MetricName: CPUUtilization
  ASGCpuAlarmScaleDown:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '10'
      ComparisonOperator: LessThanThreshold
      AlarmDescription: Scale the ASG Down if a 5m average of CPU utilized is less than 10%
      Period: '300'
      AlarmActions: [!Ref 'ASGScaleDown']
      Namespace: AWS/ECS
      Dimensions:
        - Name: ClusterName
          Value: !Ref 'AWS::StackName'
        - Name: ServiceName
          Value: !Select [ 1, !Split [ '/', !Ref 'service' ]]
      MetricName: CPUUtilization

 
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['ecs:CreateCluster', 'ecs:DeregisterContainerInstance', 'ecs:DiscoverPollEndpoint',
              'ecs:Poll', 'ecs:RegisterContainerInstance', 'ecs:StartTelemetrySession',
              'ecs:Submit*', 'logs:CreateLogStream', 'logs:PutLogEvents']
            Resource: '*'
  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: 
              - 'application-autoscaling:*'
              - 'cloudwatch:DescribeAlarms'
              - 'cloudwatch:PutMetricAlarm'
              - 'ecs:DescribeServices' 
              - 'ecs:UpdateService'
            Resource: '*'
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'EC2Role']
Outputs:
  ecsservice:
    Value: !Ref 'service'
  ecscluster:
    Value: !Ref 'ECSCluster'
  ECSALB:
    Description: Your ALB DNS URL
    Value: !Join ['', [!GetAtt [ECSALB, DNSName]]]
  taskdef:
    Value: !Ref 'taskdefinition'
